[tool.poetry]
authors = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
description = "A client to the LimeSurvey Remote Control API 2, written in modern Python."
documentation = "https://citric.readthedocs.io"
homepage = 'https://github.com/edgarrmondragon/citric'
keywords = ["limesurvey", "json-rpc"]
license = "MIT"
maintainers = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
name = "citric"
readme = "README.md"
repository = 'https://github.com/edgarrmondragon/citric'
version = "0.0.0"

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/edgarrmondragon/citric/issues"

[tool.poetry.dependencies]
python = ">=3.8"
requests = ">=2.23.0"

# Docs
furo = { version = ">=2023.3.27", optional = true, python = ">=3.9" }
myst-parser = { version = ">=2", optional = true, python = ">=3.9" }
sphinx = { version = ">=7.2.2", optional = true, python = ">=3.9" }
sphinx-autoapi = { version = ">=3", optional = true, python = ">=3.9" }
sphinx-autobuild = { version = ">=2021.3.14", optional = true, python = ">=3.9" }
sphinx-copybutton = { version = ">=0.5.1", optional = true, python = ">=3.9" }
sphinx-hoverxref = { version = ">=1.3.0", optional = true, python = ">=3.9" }
sphinx-notfound-page = {version = ">=1.0.0", optional = true, python = ">=3.9"}

[tool.poetry.group.dev.dependencies]
colorama = ">=0.4.6"
coverage = { extras = ["toml"], version = ">=7.3.0" }
faker = ">=19"
mypy = ">=1.5"
pytest = ">=7.3.1"
pytest-github-actions-annotate-failures = ">=0.1.7"
python-dotenv = ">=1"
requests-cache = { version = "^1.1.0", python = "<4.0" }
safety = ">=2.1.1"
semver = "^3.0.1"
tabulate = "^0.9.0"
types-requests = ">=2.31.0.2"
types-tabulate = "^0.9.0.3"
typing-extensions = { version = ">=4.6.0", python = "<3.12" }
xdoctest = ">=1.1.1"

[tool.poetry.extras]
docs = [
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autoapi",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-hoverxref",
  "sphinx-notfound-page",
]

[tool.black]
line-length = 88

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
line-length = 88
src = ["src", "tests", "docs"]
target-version = "py38"

[tool.ruff.lint]
explicit-preview-rules = false
ignore = [
  "ANN101", # missing-type-self
  "DJ",     # flake8-django
  "FIX002", # line-contains-todo
  "COM812",  # missing-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
]
preview = true
select = [
  "F",       # Pyflakes
  "E",       # pycodestyle (error)
  "W",       # pycodestyle (warning)
  "C90",     # mccabe
  "I",       # isort
  "N",       # pep8-naming
  "D",       # pydocstyle
  "UP",      # pyupgrade
  "YTT",     # flake8-2020
  "ANN",     # flake8-annotations
  "S",       # bandit
  "BLE",     # flake8-blind-except
  "FBT",     # flake8-boolean-trap
  "B",       # flake8-bugbear
  "A",       # flake8-builtins
  "COM",     # flake8-commas
  "C4",      # flake8-comprehensions
  "DTZ",     # flake8-datetimez
  "T10",     # flake8-debugger
  "EM",      # flake8-errmsg
  "FA",      # flake8-future-annotations
  "ISC",     # flake8-implicit-str-concat
  "ICN",     # flake8-import-conventions
  "G",       # flake8-logging-format
  "INP",     # flake8-no-pep420
  "PIE",     # flake8-pie
  "T20",     # flake8-print
  "PT",      # flake8-pytest-style
  "Q",       # flake8-quotes
  "RSE",     # flake8-raise
  "RET",     # flake8-return
  "SLF",     # flake8-self
  "SLOT",    # flake8-slots
  "SIM",     # flake8-simplify
  "TID",     # flake8-tidy-imports
  "TCH",     # flake8-type-checking
  "ARG",     # flake8-unused-arguments
  "PTH",     # flake8-use-pathlib
  "TD",      # flake8-todos
  "FIX",     # flake8-fixme
  "ERA",     # flake8-eradicate
  "PD",      # pandas-vet
  "PGH",     # pygrep-hooks
  "PLC",     # pylint
  "PLE",     # pylint
  "PLR",     # pylint
  "PLW",     # pylint
  "TRY",     # tryceratops
  "FLY",     # flynt
  "PERF",    # perflint
  "FURB",    # repeated-append
  "LOG",     # flake8-logging
  "RUF",     # Ruff-specific rules
]
unfixable = [
  "ERA", # Don't remove commented out code
]

[tool.ruff.per-file-ignores]
"docs/notebooks/*" = [
  "D100",   # undocumented-public-module
  "INP001", # implicit-namespace-package
  "I002",   # missing-required-import
  "E402",   # module-import-not-at-top-of-file
]
"src/*" = [
  "PD", # pandas-vet
]
"tests/*" = [
  "ARG00",   # unused-method-argument
  "C901",    # complex-structure
  "S101",    # assert
  "S105",    # hardcoded-password-string
  "S106",    # hardcoded-password-func-arg
  "ANN201",  # missing-return-type-undocumented-public-function
  "PLR2004", # magic-value-comparison
  "SLF001",  # private-member-access
  "PLR6301", # no-self-use
]

[tool.ruff.format]
# Enable preview style formatting.
preview = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-errmsg]
max-string-length = 30

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["typing"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
typing = "t"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["citric"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.codespell]
skip = ".mypy_cache,.nox,.ruff_cache,build,docs/index.md,poetry.lock"

[tool.pytest.ini_options]
addopts = [
  "-vvv",
  "-W error",
  "-W default::citric._compat.FutureVersionWarning",
]
markers = [
  "integration_test: Integration and end-to-end tests",
  "xfail_mysql: Mark a test as expected to fail on MySQL",
]

[tool.coverage.paths]
package = [
  "src/citric/",
  "*/site-packages/citric/",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["citric"]
relative_files = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", '''if (t\.)?TYPE_CHECKING:''']
fail_under = 85
omit = ["src/citric/types.py"]
precision = 2
show_missing = true

[tool.mypy]
enable_incomplete_feature = "Unpack"
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["nox.*", "nox_poetry.*", "pytest.*"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^v?((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?(\\+(?P<tagged_metadata>.+))?$"
style = "semver"

[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = [
  "poetry-core>=1",
  "poetry-dynamic-versioning<2.0.0,>=1",
]
