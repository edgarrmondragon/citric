[tool.poetry]
authors = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
description = "A client to the LimeSurvey Remote Control API 2, written in modern Python."
documentation = "https://citric.readthedocs.io"
homepage = 'https://github.com/edgarrmondragon/citric'
keywords = ["limesurvey", "json-rpc"]
license = "MIT"
maintainers = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
name = "citric"
readme = "README.md"
repository = 'https://github.com/edgarrmondragon/citric'
version = "0.3.0"

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/edgarrmondragon/citric/issues"

[tool.poetry.dependencies]
importlib_metadata = {version = ">=1.6,<5.0", python = "<3.8"}
python = "^3.7.0"
requests = "^2.23.0"

# Docs
furo = {version = "2022.4.7", optional = true}
myst-parser = {version = "0.17.2", optional = true}
sphinx = {version = "4.5.0", optional = true}
sphinx-autoapi = {version = "1.8.4", optional = true}
sphinx-autobuild = {version = "^2021.3.14", optional = true}
sphinx-autodoc-typehints = {version = "1.18.1", optional = true}
sphinx-copybutton = {version = "^0.5.0", optional = true}

# Jupyter
ipykernel = {version = "^6.8.0", optional = true}
jupyterlab = {version = "^3.2.5", optional = true}

[tool.poetry.group.dev.dependencies]
codecov = "^2.1.4"
colorama = "^0.4.5"
coverage = {extras = ["toml"], version = "^6.4"}
pytest = "^7.1.2"
pytest-github-actions-annotate-failures = "^0.1.7"
pytype = {version = "^2022.8.23", python = "<3.8"}
safety = "^2.1.1"
xdoctest = "^1.0.2"

[tool.poetry.extras]
docs = [
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autoapi",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
]
jupyter = [
  "ipykernel",
  "jupyterlab",
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["citric"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.black]
line-length = 88

[tool.isort]
add_imports = [
  "from __future__ import annotations",
]
include_trailing_comma = true
known_first_party = "citric"
multi_line_output = 3 # Vertical Hanging Indent
profile = "black"
src_paths = "citric"
use_parentheses = true

[tool.pytest.ini_options]
addopts = '-vvv'
markers = [
  "integration_test: Integration and end-to-end tests",
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "nox.*",
  "nox_poetry.*",
  "pytest.*",
]

[tool.ruff]
line-length = 88
select = [
  # pydocstyle (with google style docstring convention)
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D200",
  "D201",
  "D202",
  "D205",
  "D206",
  "D207",
  "D208",
  "D209",
  "D210",
  "D211",
  "D212",
  "D214",
  "D300",
  "D402",
  "D403",
  "D405",
  "D410",
  "D411",
  "D412",
  "D414",
  "D415",
  "D416",
  "D417",
  "D418",
  "D419",
  # pyupgrade
  "U001",
  "U002",
  "U003",
  "U004",
  "U005",
  "U006",
  "U007",
  "U008",
  # pep8-naming
  "N801",
  "N802",
  "N803",
  "N804",
  "N805",
  "N807",
  "N811",
  "N812",
  "N813",
  "N814",
  "N817",
  # flake8-comprehensions
  "C400",
  "C401",
  "C402",
  "C403",
  "C404",
  "C405",
  "C406",
  "C408",
  "C409",
  "C410",
  "C411",
  "C413",
  "C414",
  "C415",
  "C416",
  "C417",
  # flake8-bugbear
  "B011",
  "B014",
  "B025",
  # flake8-builtins
  "A001",
  "A002",
  "A003",
  # flake8-print
  "T201",
  "T203", # Meta rules
  # FIXME: Uncomment when flake8-annotations rules are implemented
  # "M001", # Unused noqa directive
]

[build-system]
build-backend = "poetry.masonry.api"
requires = ["poetry>=0.12"]
