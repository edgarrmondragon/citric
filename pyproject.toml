[tool.black]
line-length = 88

[tool.isort]
include_trailing_comma = true
known_first_party = "citric"
multi_line_output = 3 # Vertical Hanging Indent
profile = "black"
src_paths = "citric"
use_parentheses = true

[tool.pytest.ini_options]
addopts = '-vvv'
markers = [
  "integration_test: Integration and end-to-end tests",
  "version(ref): Mark a test that depends on a specific version of LimeSurvey",
  "xfail_mysql: Mark a test as expected to fail on MySQL",
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["citric"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    '''if (t\.)?TYPE_CHECKING:''',
]
fail_under = 90
omit = [
  "src/citric/types.py",
]
show_missing = true

[tool.mypy]
enable_incomplete_feature = "Unpack"
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "nox.*",
  "nox_poetry.*",
  "pytest.*",
]

[tool.poetry]
authors = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
description = "A client to the LimeSurvey Remote Control API 2, written in modern Python."
documentation = "https://citric.readthedocs.io"
homepage = 'https://github.com/edgarrmondragon/citric'
keywords = ["limesurvey", "json-rpc"]
license = "MIT"
maintainers = ["Edgar Ramírez-Mondragón <edgarrm358@gmail.com>"]
name = "citric"
readme = "README.md"
repository = 'https://github.com/edgarrmondragon/citric'
version = "0.6.0"

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/edgarrmondragon/citric/issues"

[tool.poetry.dependencies]
importlib_metadata = {version = ">=1.6", python = "<3.8"}
python = "^3.7.0"
requests = "^2.23.0"
typing-extensions = {version = "^4.4.0", python = "<3.12"}

# Docs
furo = {version = "^2022.12.7", optional = true}
myst-parser = {version = "^1.0.0", optional = true}
sphinx = {version = "<6", optional = true}
sphinx-autoapi = {version = "^2.0.1", optional = true}
sphinx-autobuild = {version = "^2021.3.14", optional = true}
sphinx-autodoc-typehints = {version = "^1.22", optional = true}
sphinx-copybutton = {version = "^0.5.1", optional = true}

[tool.poetry.group.dev.dependencies]
codecov = "^2.1.4"
colorama = "^0.4.5"
coverage = {extras = ["toml"], version = "^7.0.1"}
pytest = "^7.1.2"
pytest-github-actions-annotate-failures = "^0.1.7"
safety = "^2.1.1"
xdoctest = "^1.0.2"

[tool.poetry.extras]
docs = [
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autoapi",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
]

[tool.ruff]
ignore = [
  "ANN101", # missing-type-self
  "DJ", # flake8-django
]
line-length = 88
select = ["ALL"]
src = ["src", "tests", "docs"]
target-version = "py37"

[tool.ruff.per-file-ignores]
"docs/notebooks/*" = ["D100", "INP001"]
"src/*" = ["PD"]
"tests/*" = [
  "ARG00",
  "C901",
  "S101",
  "S105",
  "S106",
  "ANN201",
  "PLR2004",
  "SLF001",
]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.flake8-errmsg]
max-string-length = 30

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.isort]
known-first-party = ["citric"]

[tool.ruff.mccabe]
max-complexity = 5

[tool.ruff.pydocstyle]
convention = "google"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]
