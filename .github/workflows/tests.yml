name: Tests

on:
  pull_request:
    paths:
    - src/**
    - tests/**
    - docker-compose*.yml
    - noxfile.py
    - poetry.lock
    - pyproject.toml
    - .github/workflows/tests.yml
    - .github/workflows/constraints.txt
  push:
    branches:
    - 'main'
    - 'trunk-merge/**'
    paths:
    - src/**
    - tests/**
    - noxfile.py
    - poetry.lock
    - pyproject.toml
    - .github/workflows/tests.yml
    - .github/workflows/constraints.txt
  schedule:
  - cron: "44 */3 * * *"
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: "\
      ${{ matrix.session }}
      ${{ matrix.python-version }}\
      ${{ matrix.session == 'integration' && format(' / integration with {0}', matrix.image_tag || matrix.limesurvey_version) || '' }}\
      ${{ matrix.session == 'integration' && format(' / {0}', matrix.database) || '' }}
      / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    env:
      FORCE_COLOR: "1"
      LS_USER: "citric_ci"
      LS_PASSWORD: "notverysecret"
      LS_PORT: "8080"
      NOXSESSION: "\
        ${{ matrix.session }}\
        -${{ matrix.python-version }}"
    strategy:
      fail-fast: false
      matrix:
        include:
        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "safety"

        - python-version: "3.11"
          os: "ubuntu-22.04"
          session: "mypy"

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "mypy"

        - python-version: "3.9"
          os: "ubuntu-22.04"
          session: "mypy"

        - python-version: "3.8"
          os: "ubuntu-22.04"
          session: "mypy"

        - python-version: "3.7"
          os: "ubuntu-22.04"
          session: "mypy"

        - python-version: "3.11"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "3.12"
          os: "ubuntu-22.04"
          session: "tests"
          experimental: true

        - python-version: "3.12"
          os: "ubuntu-22.04"
          session: "tests"
          experimental: true
          nightly: true

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "3.9"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "3.8"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "3.7"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "pypy3.7"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "pypy3.8"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "pypy3.9"
          os: "ubuntu-22.04"
          session: "tests"

        - python-version: "3.10"
          os: "windows-2022"
          session: "tests"

        - python-version: "3.10"
          os: "macos-12"
          session: "tests"

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "integration"
          image_tag: "5-apache"
          database: postgres

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "integration"
          image_tag: "5-apache"
          experimental: true
          database: mysql

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "integration"
          limesurvey_version: "develop"
          database: postgres
          experimental: true

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "integration"
          limesurvey_version: "master"
          database: postgres
          experimental: true

        - python-version: "pypy3.7"
          os: "ubuntu-22.04"
          session: "integration"
          image_tag: "5-apache"
          database: postgres

        - python-version: "pypy3.8"
          os: "ubuntu-22.04"
          session: "integration"
          image_tag: "5-apache"
          database: postgres

        - python-version: "pypy3.9"
          os: "ubuntu-22.04"
          session: "integration"
          image_tag: "5-apache"
          database: postgres

        - python-version: "3.10"
          os: "ubuntu-22.04"
          session: "xdoctest"

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.3.0

    - name: Setup Python ${{ matrix.python-version }}
      if: "${{ !matrix.nightly }}"
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}${{ matrix.experimental && '-dev' || '' }}
        architecture: x64

    - name: Setup Python ${{ matrix.python-version }} (nightly)
      if: "${{ matrix.nightly }}"
      uses: deadsnakes/action@v3.0.0
      with:
        python-version: "${{ matrix.python-version }}-dev"

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Upgrade pip in virtual environments
      shell: python
      run: |
        import os
        import pip

        with open(os.environ["GITHUB_ENV"], mode="a") as io:
            print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry --verbose
        poetry --version

    - name: Install Nox
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install nox
        pipx inject nox nox-poetry
        nox --version

    - name: Checkout Docker image repository
      if: ${{ matrix.session == 'integration' && matrix.limesurvey_version }}
      uses: actions/checkout@v3.3.0
      with:
        repository: martialblog/docker-limesurvey
        path: "./.docker-limesurvey"

    - name: Download LimeSurvey archive
      if: ${{ matrix.session == 'integration' && matrix.limesurvey_version }}
      run: |
        wget https://github.com/LimeSurvey/LimeSurvey/archive/${{ matrix.limesurvey_version }}.tar.gz -O ls.tar.gz
        echo "LS_CHECKSUM=$(sha256sum ls.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV

    - name: Start services
      if: ${{ matrix.session == 'integration' }}
      env:
        LS_IMAGE_TAG: ${{ matrix.image_tag }}
        LS_DOCKERFILE_CONTEXT: "./.docker-limesurvey/5.0/apache"
        LS_DOCKERFILE: Dockerfile
        LS_VERSION: ${{ matrix.limesurvey_version }}
        COMPOSE_FILE: "\
          docker-compose.yml\
          ${{ matrix.limesurvey_version && ':docker-compose.ref.yml' }}\
          ${{ matrix.database == 'mysql' && ':docker-compose.mysql.yml' || '' }}"
      run: |
        docker-compose up -d
        docker ps -a

    - name: Run Nox
      env:
        BACKEND: ${{ matrix.database }}
        LS_VERSION: ${{ matrix.limesurvey_version }}
      run: |
        nox

    - name: Upload coverage data
      if: always() && (matrix.session == 'tests' || matrix.session == 'integration')
      uses: actions/upload-artifact@v3.1.2
      with:
        name: coverage-data
        path: ".coverage.*"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    env:
      NOXSESSION: coverage
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.3.0

    - name: Set up Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: "3.10"

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Install Nox
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
        pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
        nox --version

    - name: Download coverage data
      uses: actions/download-artifact@v3.0.2
      with:
        name: coverage-data

    - name: Combine coverage data and display human readable report
      run: |
        nox

    - name: Create coverage report
      run: |
        nox -- xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3.1.1
      with:
        fail_ci_if_error: true
