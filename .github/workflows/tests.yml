name: Tests
on:
  pull_request: {}
  push:
    branches: [main]
  schedule:
  - cron: '44 */3 * * *'
  workflow_dispatch:
    inputs: {}
jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }}${{ matrix.session == 'integration' && format(' / integration with {0}', matrix.image_tag || matrix.limesurvey_version) || '' }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
    strategy:
      fail-fast: false
      matrix:
        include:
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "safety",      experimental: false }
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "mypy",        experimental: false }
        - { python-version: "3.9",     os: "ubuntu-latest",  session: "mypy",        experimental: false }
        - { python-version: "3.8",     os: "ubuntu-latest",  session: "mypy",        experimental: false }
        - { python-version: "3.7",     os: "ubuntu-latest",  session: "mypy",        experimental: false }
        - { python-version: "3.11",    os: "ubuntu-latest",  session: "tests",       experimental: true }
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "tests",       experimental: false }
        - { python-version: "3.9",     os: "ubuntu-latest",  session: "tests",       experimental: false }
        - { python-version: "3.8",     os: "ubuntu-latest",  session: "tests",       experimental: false }
        - { python-version: "3.7",     os: "ubuntu-latest",  session: "tests",       experimental: false }
        - { python-version: "pypy3.9", os: "ubuntu-latest",  session: "tests",       experimental: false }
        - { python-version: "3.10",    os: "windows-latest", session: "tests",       experimental: false }
        - { python-version: "3.10",    os: "macos-latest",   session: "tests",       experimental: false }
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "integration", experimental: false, image_tag: "5-apache" }
        - { python-version: "pypy3.9", os: "ubuntu-latest",  session: "integration", experimental: false, image_tag: "5-apache" }
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "xdoctest",    experimental: false }
        - { python-version: "3.10",    os: "ubuntu-latest",  session: "integration", experimental: false, limesurvey_version: 5.3.28+220727, limesurvey_checksum: 0ac56133769b3b3e01c7ced6ec19dd4a0e5dd0d364ae0651c30d0fcff1373171 }

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.1.0
      with:
        python-version: ${{ matrix.python-version }}${{ matrix.experimental && '-dev' || '' }}
        architecture: x64

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Upgrade pip in virtual environments
      shell: python
      run: |
        import os
        import pip

        with open(os.environ["GITHUB_ENV"], mode="a") as io:
            print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry
        poetry --version

    - name: Install Nox
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install nox
        pipx inject nox nox-poetry
        nox --version

    - name: Checkout Docker image repository
      if: ${{ matrix.session == 'integration' && matrix.limesurvey_version }}
      uses: actions/checkout@v3.0.2
      with:
        repository: martialblog/docker-limesurvey
        path: "./.docker-limesurvey"

    - name: Start services
      if: ${{ matrix.session == 'integration' }}
      env:
        LS_IMAGE_TAG: ${{ matrix.image_tag }}
        LS_DOCKERFILE_CONTEXT: "./.docker-limesurvey/5.0/apache"
        LS_DOCKERFILE: Dockerfile
        LS_VERSION: ${{ matrix.limesurvey_version }}
        LS_CHECKSUM: ${{ matrix.limesurvey_checksum }}
        COMPOSE_FILE: "docker-compose.yml${{ matrix.limesurvey_version && ':docker-compose.ref.yml' }}"
        COMPOSE_PROFILES: "test"
      run: |
        docker-compose up -d
        docker ps -a

    - name: Run Nox
      run: |
        nox --python=${{ matrix.python-version }}

    - name: Upload coverage data
      if: always() && (matrix.session == 'tests' || matrix.session == 'integration')
      uses: actions/upload-artifact@v3.1.0
      with:
        name: coverage-data
        path: ".coverage.*"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Set up Python
      uses: actions/setup-python@v4.1.0
      with:
        python-version: "3.10"

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Install Nox
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
        pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
        nox --version

    - name: Download coverage data
      uses: actions/download-artifact@v3.0.0
      with:
        name: coverage-data

    - name: Combine coverage data and display human readable report
      run: |
        nox --session=coverage

    - name: Create coverage report
      run: |
        nox --session=coverage -- xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3.1.0
