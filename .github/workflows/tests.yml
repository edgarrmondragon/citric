name: Tests
on:
  pull_request: {}
  push:
    branches: [master]
jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }}${{ matrix.integration && ' (integration)' || '' }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
    strategy:
      fail-fast: false
      matrix:
        include:
        - { python-version: "3.10", os: "ubuntu-latest", session: "safety", experimental: false }
        - { python-version: "3.10", os: "ubuntu-latest", session: "mypy", experimental: false }
        - { python-version: "3.9", os: "ubuntu-latest", session: "mypy", experimental: false }
        - { python-version: "3.8", os: "ubuntu-latest", session: "mypy", experimental: false }
        - { python-version: "3.7", os: "ubuntu-latest", session: "mypy", experimental: false }
        - { python-version: "3.11", os: "ubuntu-latest", session: "tests", experimental: true, pre-release: "3.11.0-alpha.7" }
        - { python-version: "3.10", os: "ubuntu-latest", session: "tests", experimental: false, integration: true }
        - { python-version: "3.10", os: "ubuntu-latest", session: "tests", experimental: false }
        - { python-version: "3.9", os: "ubuntu-latest", session: "tests", experimental: false }
        - { python-version: "3.8", os: "ubuntu-latest", session: "tests", experimental: false }
        - { python-version: "3.7", os: "ubuntu-latest", session: "tests", experimental: false }
        - { python-version: "pypy-3.9", os: "ubuntu-latest", session: "tests", experimental: false }
        - { python-version: "3.10", os: "windows-latest", session: "tests", experimental: false }
        - { python-version: "3.10", os: "macos-latest", session: "tests", experimental: false }
        - { python-version: "3.10", os: "ubuntu-latest", session: "xdoctest", experimental: false }

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3.1.2
      with:
        python-version: ${{ matrix.pre-release || matrix.python-version }}
        architecture: x64

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Upgrade pip in virtual environments
      shell: python
      run: |
        import os
        import pip

        with open(os.environ["GITHUB_ENV"], mode="a") as io:
            print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Install Nox
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
        pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
        nox --version

    - name: Start services
      if: ${{ matrix.integration }}
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        docker ps -a

    - name: Run Nox
      env:
        LIMESURVEY_URL: "http://localhost:8001/index.php/admin/remotecontrol"
        DB_URI: "postgresql://limesurvey:secret@localhost:5432/limesurvey"
      run: |
        nox --python=${{ matrix.python-version }} -- ${{ matrix.integration && '-m integration_test' || '' }}

    - name: Upload coverage data
      if: always() && matrix.session == 'tests'
      uses: actions/upload-artifact@v3.0.0
      with:
        name: coverage-data
        path: ".coverage.*"

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Set up Python
      uses: actions/setup-python@v3.1.2
      with:
        python-version: "3.10"

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Install Nox
      run: |
        pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
        pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
        nox --version

    - name: Download coverage data
      uses: actions/download-artifact@v3.0.0
      with:
        name: coverage-data

    - name: Combine coverage data and display human readable report
      run: |
        nox --session=coverage

    - name: Create coverage report
      run: |
        nox --session=coverage -- xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3.1.0
